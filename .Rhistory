sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
## Compare a single hit to standing
sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV)
sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face))
}
manual.compute.hit.EV(16, "J")
manual.compute.hit.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
## Compare a single hit to standing
cat(sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV))
cat(sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face)))
}
manual.compute.hit.EV(16, "J")
manual.compute.hit.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
## Compare a single hit to standing
cat(sprintf("Expected win percentage hitting: %.2f\n", win.EV - loss.EV))
cat(sprintf("Expected win percentage standing: %.2f\n", stand.EV(player.total, dealer.face)))
}
manual.compute.hit.EV(16, "J")
manual.compute.hit.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
## Compare a single hit to standing
return(c(
sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV),
sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face))
))
}
manual.compute.hit.EV(16, "J")
manual.compute.hit.EV(16, "3")
manual.compute.hit.EV(17, "J")
manual.compute.hit.EV(6, "J")
manual.compute.hit.EV(18, "3")
manual.compute.hit.EV(12, "A")
manual.compute.hit.EV(15, "K")
manual.compute.hit.EV(16, "K")
manual.compute.hit.EV(9, "J")
manual.compute.hit.EV(19, "J")
manual.compute.hit.EV(16, "A")
manual.compute.hit.EV(10, "10")
manual.compute.hit.EV(20, "10")
manual.compute.hit.EV(13, "4")
manual.compute.hit.EV(17, "9")
manual.compute.hit.EV(12, "9")
rm(list = ls())
dealer.library <- read.csv("dealer_blackjack_probs.csv", row.names=1,
check.names = F)
col.names = as.numeric(colnames(dealer.library))
card.names <- c('A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K')
card.vals <- c(1,2,3,4,5,6,7,8,9,10,10,10,10)
card.probs <- rep(1/13, 13)
manual.compute.hit.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
## Compare a single hit to standing
return(c(
sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV),
sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face))
))
}
manual.compute.hit.EV(12, "A")
## Stand EV is the same even if player holds an Ace
stand.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
win.prob <- sum(dealer.results[, col.names < player.total])
loss.prob <- sum(dealer.results[, col.names > player.total])
return(win.prob - loss.prob)
}
hit.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
all.stand.EV <- numeric(21)
for (i in 1:21) {
all.stand.EV[i] <- stand.EV(i, dealer.face)
}
all.hit.EV <- numeric(21)
all.hit.EV[21] = -1
# compute hit EV for player totals 20 down to 1
for (i in 20:1) {
cumm.EV <- 0
bust.prob <- 0
for (j in seq_along(card.vals)) {
card <- card.vals[j]
prob <- card.probs[j]
new.total <- i + card
if (card == 1 && i < 11) {
# Ace as 11
ev1 <- max(all.stand.EV[i + 1], all.hit.EV[i + 1])
ev2 <- max(all.stand.EV[i + 11], all.hit.EV[i + 11])
best.ev <- max(ev1, ev2)
} else if (new.total <= 21) {
best.ev <- max(all.stand.EV[new.total], all.hit.EV[new.total])
} else {
bust.prob <- bust.prob + prob
next
}
cumm.EV <- cumm.EV + prob * best.ev
}
all.hit.EV[i] <- cumm.EV - bust.prob
}
print(all.stand.EV)
print(all.hit.EV)
ifelse(all.hit.EV > all.stand.EV, "Hit", "Stand")
return(c(
sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV),
sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face))
))
}
manual.compute.hit.EV(12, "A")
manual.compute.hit.EV(12, "5")
manual.compute.hit.EV(19, "A")
manual.compute.hit.EV(17, "J")
manual.compute.hit.EV(13, "A")
manual.compute.hit.EV(17, "A")
manual.compute.hit.EV(16, "2")
manual.compute.hit.EV(16, "K")
manual.compute.hit.EV(18, "K")
manual.compute.hit.EV(13, "K")
manual.compute.hit.EV(12, "9")
manual.compute.hit.EV(17, "9")
dealer.library[, "10"]
dealer.library["10", ]
double.down.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
return(win.EV - loss.EV)
}
hit.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
all.stand.EV <- numeric(21)
for (i in 1:21) {
all.stand.EV[i] <- stand.EV(i, dealer.face)
}
all.hit.EV <- numeric(21)
all.hit.EV[21] = -1
# compute hit EV for player totals 20 down to 1
for (i in 20:1) {
cumm.EV <- 0
bust.prob <- 0
for (j in seq_along(card.vals)) {
card <- card.vals[j]
prob <- card.probs[j]
new.total <- i + card
if (card == 1 && i < 11) {
# Ace as 11
ev1 <- max(all.stand.EV[i + 1], all.hit.EV[i + 1])
ev2 <- max(all.stand.EV[i + 11], all.hit.EV[i + 11])
best.ev <- max(ev1, ev2)
} else if (new.total <= 21) {
best.ev <- max(all.stand.EV[new.total], all.hit.EV[new.total])
} else {
bust.prob <- bust.prob + prob
next
}
cumm.EV <- cumm.EV + prob * best.ev
}
all.hit.EV[i] <- cumm.EV - bust.prob
}
print(all.stand.EV)
print(all.hit.EV)
ifelse(all.hit.EV > all.stand.EV, "Hit", "Stand")
return(c(
sprintf("Expected win percentage hitting: %.2f", win.EV - loss.EV),
sprintf("Expected win percentage standing: %.2f", stand.EV(player.total, dealer.face))
))
}
hit.EV(12, "5")
hit.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
all.stand.EV <- numeric(21)
for (i in 1:21) {
all.stand.EV[i] <- stand.EV(i, dealer.face)
}
all.hit.EV <- numeric(21)
all.hit.EV[21] = -1
# compute hit EV for player totals 20 down to 1
for (i in 20:1) {
cumm.EV <- 0
bust.prob <- 0
for (j in seq_along(card.vals)) {
card <- card.vals[j]
prob <- card.probs[j]
new.total <- i + card
if (card == 1 && i < 11) {
# Ace as 11
ev1 <- max(all.stand.EV[i + 1], all.hit.EV[i + 1])
ev2 <- max(all.stand.EV[i + 11], all.hit.EV[i + 11])
best.ev <- max(ev1, ev2)
} else if (new.total <= 21) {
best.ev <- max(all.stand.EV[new.total], all.hit.EV[new.total])
} else {
bust.prob <- bust.prob + prob
next
}
cumm.EV <- cumm.EV + prob * best.ev
}
all.hit.EV[i] <- cumm.EV - bust.prob
}
return(all.hit.EV[player.total])
}
hit.EV(12, "5")
double.down.EV(12, "5")
hit.EV(19, "5")
double.down.EV(19, "5")
hit.EV(9, "5")
double.down.EV(9, "5")
rm(list = ls())
dealer.library <- read.csv("dealer_blackjack_probs.csv", row.names=1,
check.names = F)
col.names = as.numeric(colnames(dealer.library))
card.names <- c('A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K')
card.vals <- c(1,2,3,4,5,6,7,8,9,10,10,10,10)
card.probs <- rep(1/13, 13)
## Stand EV is the same even if player holds an Ace
stand.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
win.prob <- sum(dealer.results[, col.names < player.total])
loss.prob <- sum(dealer.results[, col.names > player.total])
return(win.prob - loss.prob)
}
hit.EV <- function(player.total, dealer.face) {
dealer.results <- dealer.library[dealer.face, ]
all.stand.EV <- numeric(21)
for (i in 1:21) {
all.stand.EV[i] <- stand.EV(i, dealer.face)
}
all.hit.EV <- numeric(21)
all.hit.EV[21] = -1
# compute hit EV for player totals 20 down to 1
for (i in 20:1) {
cumm.EV <- 0
bust.prob <- 0
for (j in seq_along(card.vals)) {
card <- card.vals[j]
prob <- card.probs[j]
new.total <- i + card
if (card == 1 && i < 11) {
# Ace as 11
ev1 <- max(all.stand.EV[i + 1], all.hit.EV[i + 1])
ev2 <- max(all.stand.EV[i + 11], all.hit.EV[i + 11])
best.ev <- max(ev1, ev2)
} else if (new.total <= 21) {
best.ev <- max(all.stand.EV[new.total], all.hit.EV[new.total])
} else {
bust.prob <- bust.prob + prob
next
}
cumm.EV <- cumm.EV + prob * best.ev
}
all.hit.EV[i] <- cumm.EV - bust.prob
}
return(all.hit.EV[player.total])
}
double.down.EV <- function(player.total, dealer.face) {
## Assumes that I hit once then stand.
## Useful for computing EV in double down scenarios
house = dealer.library[dealer.face, ]
hands = player.total + card.vals
probs = c(sum(hands < 17), sum(hands == 17), sum(hands == 18),
sum(hands== 19), sum(hands == 20), sum(hands == 21),
sum(hands > 21)) / 13
win.EV = probs[1]*house['0'] +
probs[2]*house['0'] +
probs[3]*sum(house[, c('0', '17')]) +
probs[4]*sum(house[, c('0', '17', '18')]) +
probs[5]*sum(house[, c('0', '17', '18', '19')]) +
probs[6]*sum(house[, c('0', '17', '18', '19', '20')])
loss.EV = probs[1]*sum(house[, c('17', '18', '19', '20', '21')]) +
probs[2]*sum(house[, c('18', '19', '20', '21')]) +
probs[3]*sum(house[, c('19', '20', '21')]) +
probs[4]*sum(house[, c('20', '21')]) +
probs[5]*sum(house[, c('21')]) +
probs[6]*0 +
probs[7]*1
return(2*(win.EV - loss.EV))
}
surrender.EV <- function(player.total, dealer.face) {
return(-.5)
}
compute.EV <- function(player.total, dealer.face) {
EV <- c(hit.EV(player.total, dealer.face),
2*double.down.EV(player.total, dealer.face),
stand.EV(player.total, dealer.face),
surrender.EV(player.total, dealer.face))
names(EV) <- c("hit", "double down", "stand", "surrender")
return(c(
sprintf("EV hit = %.2f\n", EV["hit"]),
sprintf("EV double down = %.2f\n", EV["double down"]),
sprintf("EV stand = %.2f\n", EV["stand"]),
sprintf("EV surrender = %.2f\n", EV["surrender"]),
sprintf("Recommendation = %s", names(EV)[which.max(EV)])
))
}
compute.EV(13, "5")
compute.EV <- function(player.total, dealer.face) {
EV <- c(hit.EV(player.total, dealer.face),
2*double.down.EV(player.total, dealer.face),
stand.EV(player.total, dealer.face),
surrender.EV(player.total, dealer.face))
names(EV) <- c("hit", "double down", "stand", "surrender")
return(paste(
sprintf("EV hit = %.2f", EV["hit"]),
sprintf("EV double down = %.2f", EV["double down"]),
sprintf("EV stand = %.2f", EV["stand"]),
sprintf("EV surrender = %.2f", EV["surrender"]),
sprintf("Recommendation = %s", names(EV)[which.max(EV)]),
sep = "\n"
))
}
compute.EV(13, "5")
compute.EV <- function(player.total, dealer.face) {
EV <- c(hit.EV(player.total, dealer.face),
2*double.down.EV(player.total, dealer.face),
stand.EV(player.total, dealer.face),
surrender.EV(player.total, dealer.face))
names(EV) <- c("hit", "double down", "stand", "surrender")
cat(
sprintf("EV hit = %.2f\n", EV["hit"]),
sprintf("EV double down = %.2f\n", EV["double down"]),
sprintf("EV stand = %.2f\n", EV["stand"]),
sprintf("EV surrender = %.2f\n", EV["surrender"]),
sprintf("Recommendation = %s\n", names(EV)[which.max(EV)])
)
}
compute.EV(13, "5")
compute.EV <- function(player.total, dealer.face) {
EV <- c(hit.EV(player.total, dealer.face),
double.down.EV(player.total, dealer.face),
stand.EV(player.total, dealer.face),
surrender.EV(player.total, dealer.face))
names(EV) <- c("hit", "double down", "stand", "surrender")
return(paste(
sprintf("%-15s = %6.2f", "EV hit",        EV["hit"]),
sprintf("%-15s = %6.2f", "EV double down",EV["double down"]),
sprintf("%-15s = %6.2f", "EV stand",      EV["stand"]),
sprintf("%-15s = %6.2f", "EV surrender",  EV["surrender"]),
sprintf("Recommendation     = %s", names(EV)[which.max(EV)]),
sep = "\n"
))
}
compute.EV(13, "5")
compute.EV <- function(player.total, dealer.face) {
EV <- c(hit.EV(player.total, dealer.face),
double.down.EV(player.total, dealer.face),
stand.EV(player.total, dealer.face),
surrender.EV(player.total, dealer.face))
names(EV) <- c("hit", "double down", "stand", "surrender")
cat(
sprintf("EV hit = %.2f\n", EV["hit"]),
sprintf("EV double down = %.2f\n", EV["double down"]),
sprintf("EV stand = %.2f\n", EV["stand"]),
sprintf("EV surrender = %.2f\n", EV["surrender"]),
sprintf("Recommendation = %s\n", names(EV)[which.max(EV)])
)
}
compute.EV(13, "5")
compute.EV(10, "6")
compute.EV(11, "3")
compute.EV(8, "A")
compute.EV(4, "A")
compute.EV(13, "A")
compute.EV(6, "A")
compute.EV(16, "A")
compute.EV(11, "K")
compute.EV(14, "K")
compute.EV(12, "Q")
compute.EV(13, "Q")
compute.EV(13, "9")
compute.EV(18, "6")
compute.EV(19, "2")
compute.EV(16, "5")
compute.EV(8, "5")
compute.EV(19, "5")
compute.EV(9, "5")
compute.EV(18, "4")
compute.EV(15, "7")
compute.EV(18, "6")
compute.EV(14, "6")
compute.EV(10, "K")
compute.EV(17, "9")
compute.EV(14, "8")
compute.EV(10, "3")
compute.EV(15, "7")
compute.EV(5, "7")
compute.EV(18, "7")
compute.EV(8, "7")
compute.EV(12, "3")
compute.EV(17, "2")
compute.EV(14, "2")
compute.EV(11, "3")
compute.EV(15, "Q")
compute.EV(10, "9")
compute.EV(12, "9")
compute.EV(19, "9")
compute.EV(9, "9")
compute.EV(15, "Q")
compute.EV(14, "9")
compute.EV(4, "9")
compute.EV(14, "6")
compute.EV(20, "6")
compute.EV(10, "6")
compute.EV(17, "7")
compute.EV(7, "7")
compute.EV(16, "7")
compute.EV(10, "3")
compute.EV(20, "3")
compute.EV(15, "4")
